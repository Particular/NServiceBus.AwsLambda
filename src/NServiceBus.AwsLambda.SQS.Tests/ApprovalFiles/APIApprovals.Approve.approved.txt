namespace NServiceBus
{
    public class AwsLambdaSQSEndpoint : NServiceBus.IAwsLambdaSQSEndpoint
    {
        public AwsLambdaSQSEndpoint(System.Func<Amazon.Lambda.Core.ILambdaContext, NServiceBus.AwsLambdaSQSEndpointConfiguration> configurationFactory) { }
        public System.Threading.Tasks.Task Process(Amazon.Lambda.SQSEvents.SQSEvent @event, Amazon.Lambda.Core.ILambdaContext lambdaContext, System.Threading.CancellationToken cancellationToken = default) { }
        public System.Threading.Tasks.Task Publish(object message, Amazon.Lambda.Core.ILambdaContext lambdaContext) { }
        public System.Threading.Tasks.Task Publish(object message, NServiceBus.PublishOptions options, Amazon.Lambda.Core.ILambdaContext lambdaContext) { }
        public System.Threading.Tasks.Task Publish<T>(System.Action<T> messageConstructor, Amazon.Lambda.Core.ILambdaContext lambdaContext) { }
        public System.Threading.Tasks.Task Publish<T>(System.Action<T> messageConstructor, NServiceBus.PublishOptions options, Amazon.Lambda.Core.ILambdaContext lambdaContext) { }
        public System.Threading.Tasks.Task Send(object message, Amazon.Lambda.Core.ILambdaContext lambdaContext) { }
        public System.Threading.Tasks.Task Send(object message, NServiceBus.SendOptions options, Amazon.Lambda.Core.ILambdaContext lambdaContext) { }
        public System.Threading.Tasks.Task Send<T>(System.Action<T> messageConstructor, Amazon.Lambda.Core.ILambdaContext lambdaContext) { }
        public System.Threading.Tasks.Task Send<T>(System.Action<T> messageConstructor, NServiceBus.SendOptions options, Amazon.Lambda.Core.ILambdaContext lambdaContext) { }
        public System.Threading.Tasks.Task Subscribe(System.Type eventType, Amazon.Lambda.Core.ILambdaContext lambdaContext) { }
        public System.Threading.Tasks.Task Subscribe(System.Type eventType, NServiceBus.SubscribeOptions options, Amazon.Lambda.Core.ILambdaContext lambdaContext) { }
        public System.Threading.Tasks.Task Unsubscribe(System.Type eventType, Amazon.Lambda.Core.ILambdaContext lambdaContext) { }
        public System.Threading.Tasks.Task Unsubscribe(System.Type eventType, NServiceBus.UnsubscribeOptions options, Amazon.Lambda.Core.ILambdaContext lambdaContext) { }
    }
    public class AwsLambdaSQSEndpointConfiguration
    {
        public AwsLambdaSQSEndpointConfiguration(string endpointName) { }
        public NServiceBus.EndpointConfiguration AdvancedConfiguration { get; }
        public NServiceBus.TransportExtensions<NServiceBus.SqsTransport> Transport { get; }
        public void DoNotSendMessagesToErrorQueue() { }
        public NServiceBus.Serialization.SerializationExtensions<T> UseSerialization<T>()
            where T : NServiceBus.Serialization.SerializationDefinition, new () { }
        protected NServiceBus.TransportExtensions<TTransport> UseTransport<TTransport>()
            where TTransport : NServiceBus.Transport.TransportDefinition, new () { }
    }
    public interface IAwsLambdaSQSEndpoint
    {
        System.Threading.Tasks.Task Process(Amazon.Lambda.SQSEvents.SQSEvent @event, Amazon.Lambda.Core.ILambdaContext lambdaContext, System.Threading.CancellationToken cancellationToken = default);
        System.Threading.Tasks.Task Publish(object message, Amazon.Lambda.Core.ILambdaContext lambdaContext);
        System.Threading.Tasks.Task Publish(object message, NServiceBus.PublishOptions options, Amazon.Lambda.Core.ILambdaContext lambdaContext);
        System.Threading.Tasks.Task Publish<T>(System.Action<T> messageConstructor, Amazon.Lambda.Core.ILambdaContext lambdaContext);
        System.Threading.Tasks.Task Publish<T>(System.Action<T> messageConstructor, NServiceBus.PublishOptions options, Amazon.Lambda.Core.ILambdaContext lambdaContext);
        System.Threading.Tasks.Task Send(object message, Amazon.Lambda.Core.ILambdaContext lambdaContext);
        System.Threading.Tasks.Task Send(object message, NServiceBus.SendOptions options, Amazon.Lambda.Core.ILambdaContext lambdaContext);
        System.Threading.Tasks.Task Send<T>(System.Action<T> messageConstructor, Amazon.Lambda.Core.ILambdaContext lambdaContext);
        System.Threading.Tasks.Task Send<T>(System.Action<T> messageConstructor, NServiceBus.SendOptions options, Amazon.Lambda.Core.ILambdaContext lambdaContext);
        System.Threading.Tasks.Task Subscribe(System.Type eventType, Amazon.Lambda.Core.ILambdaContext lambdaContext);
        System.Threading.Tasks.Task Subscribe(System.Type eventType, NServiceBus.SubscribeOptions options, Amazon.Lambda.Core.ILambdaContext lambdaContext);
        System.Threading.Tasks.Task Unsubscribe(System.Type eventType, Amazon.Lambda.Core.ILambdaContext lambdaContext);
        System.Threading.Tasks.Task Unsubscribe(System.Type eventType, NServiceBus.UnsubscribeOptions options, Amazon.Lambda.Core.ILambdaContext lambdaContext);
    }
}